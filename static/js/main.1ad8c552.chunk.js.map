{"version":3,"sources":["seal.jpg","pig.jpg","fancy.png","turtle.jpg","Card.js","CardContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","_ref","image","number","displayOverlay","toggleOverlay","react_default","a","createElement","className","onClick","console","log","src","alt","CardContainer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setState","prevState","state","src_Card_0","assign","Component","App","images","fancy","turtle","seal","pig","map","i","src_CardContainer","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yTCezBC,SAZF,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,MAAOC,EAATF,EAASE,OAAQC,EAAjBH,EAAiBG,eAAgBC,EAAjCJ,EAAiCI,cAAjC,OACTC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBC,QAASL,GACpCM,QAAQC,IAAIR,GACbE,EAAAC,EAAAC,cAAA,OAAKK,IAAKX,EAAOY,IAAI,kBAAkBL,UAAU,eAChDL,GACGE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACVN,MCkBFY,cAvBX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAOVX,cAAgB,WACZY,EAAKO,SAAS,SAAAC,GAAS,MAAK,CAACrB,gBAAiBqB,EAAUrB,mBANxDa,EAAKS,MAAQ,CACTtB,gBAAgB,GAJLa,wEAaf,OACIX,EAAAC,EAAAC,cAACmB,EAADT,OAAAU,OAAA,GACQR,KAAKJ,MADb,CAEIZ,eAAgBgB,KAAKM,MAAMtB,eAC3BC,cAAee,KAAKf,wBAlBRwB,aCyBbC,qBAnBb,SAAAA,EAAYd,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAU,IACjBb,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAY,GAAAP,KAAAH,KAAMJ,KAEDU,MAAQ,CACXK,OAAQ,CAACC,IAAOA,IAAOC,IAAQC,IAAMC,IAAKD,IAAMD,IAAQE,MAJzClB,wEASjB,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZW,KAAKM,MAAMK,OAAOK,IAAI,SAAClC,EAAOmC,GAAR,OACrB/B,EAAAC,EAAAC,cAAC8B,EAAD,CAAeC,IAAKF,EAAGnC,MAAOA,EAAOC,OAAQkC,EAAI,cAbzCR,cCIEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1ad8c552.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/seal.e207ba84.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pig.3543cbf4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fancy.87e4009a.png\";","module.exports = __webpack_public_path__ + \"static/media/turtle.c7dcba49.jpg\";","import React from 'react';\nimport './Card.css';\n\nconst Card = ({image, number, displayOverlay, toggleOverlay}) => (\n    <div className=\"Card-container\" onClick={toggleOverlay}>\n        {console.log(displayOverlay)}\n        <img src={image} alt=\"match game item\" className=\"Card-image\" />\n        {displayOverlay && (\n            <div className=\"Card-overlay\">\n                {number}\n            </div>\n        )}\n    </div>\n);\n\nexport default Card;","import React, {Component} from 'react';\nimport Card from './Card.js';\n\nclass CardContainer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            displayOverlay: true\n        };\n    }\n\n    toggleOverlay = () => {\n        this.setState(prevState => ({displayOverlay: !prevState.displayOverlay}))\n    }\n\n    render() {\n        return (\n            <Card\n                {...this.props}\n                displayOverlay={this.state.displayOverlay}\n                toggleOverlay={this.toggleOverlay}\n            />\n        );\n    }\n};\n\nexport default CardContainer","import React, { Component } from 'react';\nimport seal from './seal.jpg';\nimport pig from './pig.jpg';\nimport fancy from './fancy.png';\nimport turtle from './turtle.jpg';\nimport CardContainer from './CardContainer.js';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      images: [fancy, fancy, turtle, seal, pig, seal, turtle, pig]\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App-cards\">\n        {this.state.images.map((image, i) => (\n          <CardContainer key={i} image={image} number={i + 1} />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}